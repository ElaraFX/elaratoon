OpenShadingLanguage 1.00
# Compiled by oslc 1.7.2
# options: 
shader max_falloff
param	color	color1	0 0 0		%read{8,19} %write{2147483647,-1}
param	color	map1	0 0 0		%read{8,8} %write{2147483647,-1}
param	float	map1_alpha	1		%read{12,12} %write{2147483647,-1}
param	vector	map1_bump	0 0 0		%read{16,16} %write{2147483647,-1}
param	int	map1On	1		%read{0,0} %write{2147483647,-1}
param	float	map1Amount	100		%read{3,15} %write{2147483647,-1}
param	color	color2	1 1 1		%read{30,41} %write{2147483647,-1}
param	color	map2	0 0 0		%read{30,30} %write{2147483647,-1}
param	float	map2_alpha	1		%read{34,34} %write{2147483647,-1}
param	vector	map2_bump	0 0 0		%read{38,38} %write{2147483647,-1}
param	int	map2On	1		%read{22,22} %write{2147483647,-1}
param	float	map2Amount	100		%read{25,37} %write{2147483647,-1}
param	int	type	1		%read{44,44} %write{2147483647,-1}
param	int	direction	3		%read{45,45} %write{2147483647,-1}
param	int	mtlIOROverride	1		%read{46,46} %write{2147483647,-1}
param	float	ior	1.6		%read{47,47} %write{2147483647,-1}
param	int	extrapolateOn	0		%read{48,48} %write{2147483647,-1}
param	float	nearDistance	0		%read{49,49} %write{2147483647,-1}
param	float	farDistance	100		%read{50,50} %write{2147483647,-1}
param	vector	nodePos	0 0 0		%read{51,51} %write{2147483647,-1}
param	int	self	1		%read{52,52} %write{2147483647,-1}
oparam	color	result	0 0 0		%read{2147483647,-1} %write{324,324}
oparam	vector	result_bump	0 0 0		%read{2147483647,-1} %write{330,330}
oparam	float	result_alpha	1		%read{2147483647,-1} %write{327,327}
global	point	P	%read{97,122} %write{2147483647,-1}
global	vector	I	%read{93,93} %write{2147483647,-1}
global	normal	N	%read{94,193} %write{2147483647,-1}
local	vector	___305_VR	%read{204,254} %write{203,253}
local	float	___305_c	%read{207,291} %write{205,290}
local	float	___305_g	%read{210,284} %write{209,262}
local	float	___310_d	%read{183,320} %write{54,319}
local	float	___310_l	%read{300,316} %write{55,180}
local	vector	___310_v	%read{95,254} %write{93,177}
local	vector	___310_n	%read{95,196} %write{94,193}
local	vector	___310_p	%read{98,114} %write{97,113}
local	matrix	___310_tm	%read{136,180} %write{56,156}
local	matrix	___310_m	%read{58,122} %write{57,90}
local	vector	___311_nVector	%read{63,89} %write{62,84}
local	vector	___315_p	%read{123,123} %write{122,122}
local	vector	___317_op	%read{121,123} %write{120,121}
local	vector	___332_R	%read{202,252} %write{198,251}
local	float	___332_VdotN	%read{195,195} %write{194,194}
local	float	___333_ior	%read{247,255} %write{246,249}
local	float	f	%read{323,329} %write{320,320}
local	color	c1	%read{322,324} %write{10,19}
local	color	c2	%read{322,322} %write{32,41}
local	float	a1	%read{325,327} %write{14,20}
local	float	a2	%read{325,325} %write{36,42}
local	vector	n1	%read{328,330} %write{18,21}
local	vector	n2	%read{328,328} %write{40,43}
local	int	param.type	%read{181,295} %write{44,44} %mystruct{param} %mystructfield{0}
local	int	param.direction	%read{91,174} %write{45,45} %mystruct{param} %mystructfield{1}
local	int	param.mtlIOROverride	%read{199,199} %write{46,46} %mystruct{param} %mystructfield{2}
local	float	param.ior	%read{206,246} %write{47,47} %mystruct{param} %mystructfield{3}
local	int	param.extrapolateOn	%read{297,305} %write{48,48} %mystruct{param} %mystructfield{4}
local	float	param.nearDistance	%read{300,317} %write{49,49} %mystruct{param} %mystructfield{5}
local	float	param.farDistance	%read{308,317} %write{50,50} %mystruct{param} %mystructfield{6}
local	vector	param.nodePos	%read{120,120} %write{51,51} %mystruct{param} %mystructfield{7}
local	int	param.self	%read{118,118} %write{52,52} %mystruct{param} %mystructfield{8}
const	int	$const1	1		%read{0,199} %write{2147483647,-1}
temp	int	$tmp1	%read{1,1} %write{0,0}
temp	int	$tmp2	%read{2,6} %write{1,5}
const	int	$const2	0		%read{1,309} %write{2147483647,-1}
const	float	$const3	0		%read{3,314} %write{2147483647,-1}
temp	int	$tmp3	%read{4,4} %write{3,3}
temp	int	$tmp4	%read{5,5} %write{4,4}
const	float	$const4	0.0099999998		%read{7,37} %write{2147483647,-1}
temp	float	$tmp5	%read{9,9} %write{7,7}
temp	color	$tmp6	%read{9,9} %write{8,8}
temp	color	$tmp7	%read{10,10} %write{9,9}
temp	float	$tmp8	%read{13,13} %write{11,11}
temp	float	$tmp9	%read{13,13} %write{12,12}
const	float	$const5	1		%read{12,304} %write{2147483647,-1}
temp	float	$tmp10	%read{14,14} %write{13,13}
temp	float	$tmp11	%read{17,17} %write{15,15}
temp	vector	$tmp12	%read{17,17} %write{16,16}
temp	vector	$tmp13	%read{18,18} %write{17,17}
temp	int	$tmp14	%read{23,23} %write{22,22}
temp	int	$tmp15	%read{24,28} %write{23,27}
temp	int	$tmp16	%read{26,26} %write{25,25}
temp	int	$tmp17	%read{27,27} %write{26,26}
temp	float	$tmp18	%read{31,31} %write{29,29}
temp	color	$tmp19	%read{31,31} %write{30,30}
temp	color	$tmp20	%read{32,32} %write{31,31}
temp	float	$tmp21	%read{35,35} %write{33,33}
temp	float	$tmp22	%read{35,35} %write{34,34}
temp	float	$tmp23	%read{36,36} %write{35,35}
temp	float	$tmp24	%read{39,39} %write{37,37}
temp	vector	$tmp25	%read{39,39} %write{38,38}
temp	vector	$tmp26	%read{40,40} %write{39,39}
const	string	$const6	"FalloffFunc"		%read{53,53} %write{2147483647,-1}
const	string	$const7	"camera"		%read{56,193} %write{2147483647,-1}
const	string	$const8	"world"		%read{56,177} %write{2147483647,-1}
const	string	$const9	"common"		%read{57,193} %write{2147483647,-1}
temp	vector	$tmp27	%read{62,62} %write{61,61}
temp	float	$tmp28	%read{61,61} %write{58,58}
temp	float	$tmp29	%read{61,61} %write{59,59}
const	int	$const10	2		%read{60,190} %write{2147483647,-1}
temp	float	$tmp30	%read{61,61} %write{60,60}
temp	float	$tmp31	%read{64,64} %write{63,63}
temp	float	$tmp32	%read{66,66} %write{65,65}
temp	float	$tmp33	%read{68,68} %write{67,67}
temp	vector	$tmp34	%read{73,73} %write{72,72}
temp	float	$tmp35	%read{72,72} %write{69,69}
temp	float	$tmp36	%read{72,72} %write{70,70}
temp	float	$tmp37	%read{72,72} %write{71,71}
temp	float	$tmp38	%read{75,75} %write{74,74}
temp	float	$tmp39	%read{77,77} %write{76,76}
temp	float	$tmp40	%read{79,79} %write{78,78}
temp	vector	$tmp41	%read{84,84} %write{83,83}
temp	float	$tmp42	%read{83,83} %write{80,80}
temp	float	$tmp43	%read{83,83} %write{81,81}
temp	float	$tmp44	%read{83,83} %write{82,82}
temp	float	$tmp45	%read{86,86} %write{85,85}
temp	float	$tmp46	%read{88,88} %write{87,87}
temp	float	$tmp47	%read{90,90} %write{89,89}
temp	int	$tmp48	%read{92,92} %write{91,91}
temp	float	$tmp49	%read{96,96} %write{95,95}
temp	int	$tmp50	%read{100,100} %write{99,99}
const	vector	$const11	-1 0 0		%read{101,101} %write{2147483647,-1}
temp	float	$tmp51	%read{104,104} %write{103,103}
temp	int	$tmp52	%read{108,108} %write{107,107}
const	vector	$const12	0 -1 0		%read{109,109} %write{2147483647,-1}
temp	float	$tmp53	%read{112,112} %write{111,111}
const	int	$const13	3		%read{115,115} %write{2147483647,-1}
temp	int	$tmp54	%read{116,116} %write{115,115}
const	vector	$const14	-1 -1 -1		%read{119,119} %write{2147483647,-1}
const	int	$const15	4		%read{127,295} %write{2147483647,-1}
temp	int	$tmp55	%read{128,128} %write{127,127}
const	vector	$const16	1 0 0		%read{129,162} %write{2147483647,-1}
const	string	$const17	"object"		%read{130,156} %write{2147483647,-1}
const	string	$const18	"transform"		%read{131,192} %write{2147483647,-1}
temp	int	$tmp56	%read{135,135} %write{134,134}
const	int	$const19	50		%read{137,159} %write{2147483647,-1}
const	int	$const20	5		%read{138,138} %write{2147483647,-1}
temp	int	$tmp57	%read{139,139} %write{138,138}
const	vector	$const21	0 1 0		%read{140,169} %write{2147483647,-1}
temp	int	$tmp58	%read{146,146} %write{145,145}
const	int	$const22	6		%read{149,149} %write{2147483647,-1}
temp	int	$tmp59	%read{150,150} %write{149,149}
const	vector	$const23	0 0 1		%read{151,176} %write{2147483647,-1}
temp	int	$tmp60	%read{157,157} %write{156,156}
const	int	$const24	7		%read{160,160} %write{2147483647,-1}
temp	int	$tmp61	%read{161,161} %write{160,160}
const	int	$const25	8		%read{167,167} %write{2147483647,-1}
temp	int	$tmp62	%read{168,168} %write{167,167}
const	int	$const26	9		%read{174,174} %write{2147483647,-1}
temp	int	$tmp63	%read{175,175} %write{174,174}
temp	int	$tmp64	%read{182,182} %write{181,181}
const	float	$const27	0.5		%read{184,184} %write{2147483647,-1}
temp	float	$tmp65	%read{184,184} %write{183,183}
temp	float	$tmp66	%read{185,185} %write{184,184}
temp	int	$tmp67	%read{187,187} %write{186,186}
temp	float	$tmp68	%read{189,189} %write{188,188}
temp	int	$tmp69	%read{191,191} %write{190,190}
const	float	$const28	2		%read{195,270} %write{2147483647,-1}
temp	float	$tmp70	%read{196,196} %write{195,195}
temp	vector	$tmp71	%read{197,197} %write{196,196}
temp	vector	$tmp72	%read{198,198} %write{197,197}
temp	int	$tmp73	%read{200,200} %write{199,199}
const	string	$const29	"Fresnel"		%read{201,250} %write{2147483647,-1}
temp	float	$tmp74	%read{208,208} %write{206,206}
temp	float	$tmp75	%read{208,208} %write{207,207}
temp	float	$tmp76	%read{209,209} %write{208,208}
temp	int	$tmp77	%read{211,211} %write{210,210}
temp	float	$tmp78	%read{215,215} %write{214,214}
temp	int	$tmp79	%read{216,216} %write{215,215}
temp	float	$tmp80	%read{219,219} %write{217,217}
temp	float	$tmp81	%read{219,219} %write{218,218}
temp	float	$tmp82	%read{224,224} %write{219,219}
temp	float	$tmp83	%read{221,221} %write{220,220}
temp	float	$tmp84	%read{223,223} %write{221,221}
temp	float	$tmp85	%read{223,223} %write{222,222}
temp	float	$tmp86	%read{224,224} %write{223,223}
temp	float	$tmp87	%read{241,241} %write{224,224}
temp	float	$tmp88	%read{226,226} %write{225,225}
temp	float	$tmp89	%read{227,227} %write{226,226}
temp	float	$tmp90	%read{231,231} %write{227,227}
temp	float	$tmp91	%read{229,229} %write{228,228}
temp	float	$tmp92	%read{230,230} %write{229,229}
temp	float	$tmp93	%read{231,231} %write{230,230}
temp	float	$tmp94	%read{239,239} %write{231,231}
temp	float	$tmp95	%read{233,233} %write{232,232}
temp	float	$tmp96	%read{234,234} %write{233,233}
temp	float	$tmp97	%read{238,238} %write{234,234}
temp	float	$tmp98	%read{236,236} %write{235,235}
temp	float	$tmp99	%read{237,237} %write{236,236}
temp	float	$tmp100	%read{238,238} %write{237,237}
temp	float	$tmp101	%read{239,239} %write{238,238}
temp	float	$tmp102	%read{240,240} %write{239,239}
temp	float	$tmp103	%read{241,241} %write{240,240}
temp	int	$tmp104	%read{248,248} %write{247,247}
temp	float	$tmp105	%read{257,257} %write{255,255}
temp	float	$tmp106	%read{257,257} %write{256,256}
temp	float	$tmp107	%read{258,258} %write{257,257}
temp	int	$tmp108	%read{260,260} %write{259,259}
temp	float	$tmp109	%read{264,264} %write{263,263}
temp	int	$tmp110	%read{265,265} %write{264,264}
temp	float	$tmp111	%read{268,268} %write{266,266}
temp	float	$tmp112	%read{268,268} %write{267,267}
temp	float	$tmp113	%read{273,273} %write{268,268}
temp	float	$tmp114	%read{270,270} %write{269,269}
temp	float	$tmp115	%read{272,272} %write{270,270}
temp	float	$tmp116	%read{272,272} %write{271,271}
temp	float	$tmp117	%read{273,273} %write{272,272}
temp	float	$tmp118	%read{290,290} %write{273,273}
temp	float	$tmp119	%read{275,275} %write{274,274}
temp	float	$tmp120	%read{276,276} %write{275,275}
temp	float	$tmp121	%read{280,280} %write{276,276}
temp	float	$tmp122	%read{278,278} %write{277,277}
temp	float	$tmp123	%read{279,279} %write{278,278}
temp	float	$tmp124	%read{280,280} %write{279,279}
temp	float	$tmp125	%read{288,288} %write{280,280}
temp	float	$tmp126	%read{282,282} %write{281,281}
temp	float	$tmp127	%read{283,283} %write{282,282}
temp	float	$tmp128	%read{287,287} %write{283,283}
temp	float	$tmp129	%read{285,285} %write{284,284}
temp	float	$tmp130	%read{286,286} %write{285,285}
temp	float	$tmp131	%read{287,287} %write{286,286}
temp	float	$tmp132	%read{288,288} %write{287,287}
temp	float	$tmp133	%read{289,289} %write{288,288}
temp	float	$tmp134	%read{290,290} %write{289,289}
temp	int	$tmp135	%read{296,296} %write{295,295}
temp	int	$tmp136	%read{298,298} %write{297,297}
temp	int	$tmp137	%read{299,303} %write{298,302}
temp	int	$tmp138	%read{301,301} %write{300,300}
temp	int	$tmp139	%read{302,302} %write{301,301}
temp	int	$tmp140	%read{306,306} %write{305,305}
temp	int	$tmp141	%read{307,311} %write{306,310}
temp	int	$tmp142	%read{309,309} %write{308,308}
temp	int	$tmp143	%read{310,310} %write{309,309}
temp	float	$tmp144	%read{314,314} %write{313,313}
temp	int	$tmp145	%read{315,315} %write{314,314}
temp	float	$tmp146	%read{318,318} %write{316,316}
temp	float	$tmp147	%read{318,318} %write{317,317}
const	float	$const30	10000		%read{319,319} %write{2147483647,-1}
temp	color	$tmp148	%read{323,323} %write{322,322}
temp	color	$tmp149	%read{324,324} %write{323,323}
temp	float	$tmp150	%read{326,326} %write{325,325}
temp	float	$tmp151	%read{327,327} %write{326,326}
temp	vector	$tmp152	%read{329,329} %write{328,328}
temp	vector	$tmp153	%read{330,330} %write{329,329}
code ___main___
	eq		$tmp1 map1On $const1 	%filename{"E:/github/elaramax/Shaders/max_falloff.osl"} %line{245} %argrw{"wrr"}
	neq		$tmp2 $tmp1 $const2 	%argrw{"wrr"}
	if		$tmp2 6 6 	%argrw{"r"}
	neq		$tmp3 map1Amount $const3 	%argrw{"wrr"}
	neq		$tmp4 $tmp3 $const2 	%argrw{"wrr"}
	assign		$tmp2 $tmp4 	%argrw{"wr"}
	if		$tmp2 19 22 	%argrw{"r"}
	mul		$tmp5 map1Amount $const4 	%line{246} %argrw{"wrr"}
	sub		$tmp6 map1 color1 	%argrw{"wrr"}
	mul		$tmp7 $tmp5 $tmp6 	%argrw{"wrr"}
	add		c1 color1 $tmp7 	%argrw{"wrr"}
	mul		$tmp8 map1Amount $const4 	%line{247} %argrw{"wrr"}
	sub		$tmp9 map1_alpha $const5 	%argrw{"wrr"}
	mul		$tmp10 $tmp8 $tmp9 	%argrw{"wrr"}
	add		a1 $const5 $tmp10 	%argrw{"wrr"}
	mul		$tmp11 map1Amount $const4 	%line{248} %argrw{"wrr"}
	sub		$tmp12 map1_bump $const5 	%argrw{"wrr"}
	mul		$tmp13 $tmp11 $tmp12 	%argrw{"wrr"}
	add		n1 $const5 $tmp13 	%argrw{"wrr"}
	assign		c1 color1 	%line{250} %argrw{"wr"}
	assign		a1 $const1 	%line{251} %argrw{"wr"}
	assign		n1 $const2 	%line{252} %argrw{"wr"}
	eq		$tmp14 map2On $const1 	%line{255} %argrw{"wrr"}
	neq		$tmp15 $tmp14 $const2 	%argrw{"wrr"}
	if		$tmp15 28 28 	%argrw{"r"}
	neq		$tmp16 map2Amount $const3 	%argrw{"wrr"}
	neq		$tmp17 $tmp16 $const2 	%argrw{"wrr"}
	assign		$tmp15 $tmp17 	%argrw{"wr"}
	if		$tmp15 41 44 	%argrw{"r"}
	mul		$tmp18 map2Amount $const4 	%line{256} %argrw{"wrr"}
	sub		$tmp19 map2 color2 	%argrw{"wrr"}
	mul		$tmp20 $tmp18 $tmp19 	%argrw{"wrr"}
	add		c2 color2 $tmp20 	%argrw{"wrr"}
	mul		$tmp21 map2Amount $const4 	%line{257} %argrw{"wrr"}
	sub		$tmp22 map2_alpha $const5 	%argrw{"wrr"}
	mul		$tmp23 $tmp21 $tmp22 	%argrw{"wrr"}
	add		a2 $const5 $tmp23 	%argrw{"wrr"}
	mul		$tmp24 map2Amount $const4 	%line{258} %argrw{"wrr"}
	sub		$tmp25 map2_bump $const5 	%argrw{"wrr"}
	mul		$tmp26 $tmp24 $tmp25 	%argrw{"wrr"}
	add		n2 $const5 $tmp26 	%argrw{"wrr"}
	assign		c2 color2 	%line{260} %argrw{"wr"}
	assign		a2 $const1 	%line{261} %argrw{"wr"}
	assign		n2 $const2 	%line{262} %argrw{"wr"}
	assign		param.type type 	%line{265} %argrw{"wr"}
	assign		param.direction direction 	%line{266} %argrw{"wr"}
	assign		param.mtlIOROverride mtlIOROverride 	%line{267} %argrw{"wr"}
	assign		param.ior ior 	%line{268} %argrw{"wr"}
	assign		param.extrapolateOn extrapolateOn 	%line{269} %argrw{"wr"}
	assign		param.nearDistance nearDistance 	%line{270} %argrw{"wr"}
	assign		param.farDistance farDistance 	%line{271} %argrw{"wr"}
	assign		param.nodePos nodePos 	%line{272} %argrw{"wr"}
	assign		param.self self 	%line{273} %argrw{"wr"}
	functioncall	$const6 322 	%line{275} %argrw{"r"}
	assign		___310_d $const3 	%line{71} %argrw{"wr"}
	assign		___310_l $const3 	%argrw{"wr"}
	matrix		___310_tm $const7 $const8 	%line{73} %argrw{"wrr"}
	matrix		___310_m $const9 $const7 	%line{74} %argrw{"wrr"}
	mxcompref	$tmp28 ___310_m $const2 $const2 	%line{76} %argrw{"wrrr"}
	mxcompref	$tmp29 ___310_m $const2 $const1 	%argrw{"wrrr"}
	mxcompref	$tmp30 ___310_m $const2 $const10 	%argrw{"wrrr"}
	vector		$tmp27 $tmp28 $tmp29 $tmp30 	%argrw{"wrrr"}
	normalize	___311_nVector $tmp27 	%argrw{"wr"}
	compref		$tmp31 ___311_nVector $const2 	%line{77} %argrw{"wrr"}
	mxcompassign	___310_m $const2 $const2 $tmp31 	%argrw{"wrrr"}
	compref		$tmp32 ___311_nVector $const1 	%argrw{"wrr"}
	mxcompassign	___310_m $const2 $const1 $tmp32 	%argrw{"wrrr"}
	compref		$tmp33 ___311_nVector $const10 	%argrw{"wrr"}
	mxcompassign	___310_m $const2 $const10 $tmp33 	%argrw{"wrrr"}
	mxcompref	$tmp35 ___310_m $const1 $const2 	%line{78} %argrw{"wrrr"}
	mxcompref	$tmp36 ___310_m $const1 $const1 	%argrw{"wrrr"}
	mxcompref	$tmp37 ___310_m $const1 $const10 	%argrw{"wrrr"}
	vector		$tmp34 $tmp35 $tmp36 $tmp37 	%argrw{"wrrr"}
	normalize	___311_nVector $tmp34 	%argrw{"wr"}
	compref		$tmp38 ___311_nVector $const2 	%line{79} %argrw{"wrr"}
	mxcompassign	___310_m $const1 $const2 $tmp38 	%argrw{"wrrr"}
	compref		$tmp39 ___311_nVector $const1 	%argrw{"wrr"}
	mxcompassign	___310_m $const1 $const1 $tmp39 	%argrw{"wrrr"}
	compref		$tmp40 ___311_nVector $const10 	%argrw{"wrr"}
	mxcompassign	___310_m $const1 $const10 $tmp40 	%argrw{"wrrr"}
	mxcompref	$tmp42 ___310_m $const10 $const2 	%line{80} %argrw{"wrrr"}
	mxcompref	$tmp43 ___310_m $const10 $const1 	%argrw{"wrrr"}
	mxcompref	$tmp44 ___310_m $const10 $const10 	%argrw{"wrrr"}
	vector		$tmp41 $tmp42 $tmp43 $tmp44 	%argrw{"wrrr"}
	normalize	___311_nVector $tmp41 	%argrw{"wr"}
	compref		$tmp45 ___311_nVector $const2 	%line{81} %argrw{"wrr"}
	mxcompassign	___310_m $const10 $const2 $tmp45 	%argrw{"wrrr"}
	compref		$tmp46 ___311_nVector $const1 	%argrw{"wrr"}
	mxcompassign	___310_m $const10 $const1 $tmp46 	%argrw{"wrrr"}
	compref		$tmp47 ___311_nVector $const10 	%argrw{"wrr"}
	mxcompassign	___310_m $const10 $const10 $tmp47 	%argrw{"wrrr"}
	eq		$tmp48 param.direction $const2 	%line{84} %argrw{"wrr"}
	if		$tmp48 99 181 	%argrw{"r"}
	transformv	___310_v ___310_m I 	%line{85} %argrw{"wrr"}
	transformn	___310_n ___310_m N 	%line{86} %argrw{"wrr"}
	dot		$tmp49 ___310_v ___310_n 	%line{87} %argrw{"wrr"}
	neg		___310_d $tmp49 	%argrw{"wr"}
	transform	___310_p ___310_m P 	%line{88} %argrw{"wrr"}
	length		___310_l ___310_p 	%line{89} %argrw{"wr"}
	eq		$tmp50 param.direction $const1 	%line{90} %argrw{"wrr"}
	if		$tmp50 107 181 	%argrw{"r"}
	assign		___310_v $const11 	%line{91} %argrw{"wr"}
	transformn	___310_n ___310_m N 	%line{92} %argrw{"wrr"}
	dot		$tmp51 ___310_n ___310_v 	%line{93} %argrw{"wrr"}
	neg		___310_d $tmp51 	%argrw{"wr"}
	transform	___310_p ___310_m P 	%line{94} %argrw{"wrr"}
	compref		___310_l ___310_p $const2 	%line{95} %argrw{"wrr"}
	eq		$tmp52 param.direction $const10 	%line{96} %argrw{"wrr"}
	if		$tmp52 115 181 	%argrw{"r"}
	assign		___310_v $const12 	%line{97} %argrw{"wr"}
	transformn	___310_n ___310_m N 	%line{98} %argrw{"wrr"}
	dot		$tmp53 ___310_n ___310_v 	%line{99} %argrw{"wrr"}
	neg		___310_d $tmp53 	%argrw{"wr"}
	transform	___310_p ___310_m P 	%line{100} %argrw{"wrr"}
	compref		___310_l ___310_p $const1 	%line{101} %argrw{"wrr"}
	eq		$tmp54 param.direction $const13 	%line{102} %argrw{"wrr"}
	if		$tmp54 127 181 	%argrw{"r"}
	transformn	___310_n ___310_m N 	%line{105} %argrw{"wrr"}
	if		param.self 120 124 	%line{106} %argrw{"r"}
	assign		___310_v $const14 	%line{108} %argrw{"wr"}
	assign		___317_op param.nodePos 	%line{113} %argrw{"wr"}
	transformv	___317_op $const8 $const7 ___317_op 	%line{114} %argrw{"wrrr"}
	transform	___315_p ___310_m P 	%line{115} %argrw{"wrr"}
	sub		___310_v ___317_op ___315_p 	%line{117} %argrw{"wrr"}
	length		___310_l ___310_v 	%line{119} %argrw{"wr"}
	normalize	___310_v ___310_v 	%line{120} %argrw{"wr"}
	dot		___310_d ___310_n ___310_v 	%line{122} %argrw{"wrr"}
	eq		$tmp55 param.direction $const15 	%line{123} %argrw{"wrr"}
	if		$tmp55 138 181 	%argrw{"r"}
	assign		___310_v $const16 	%line{124} %argrw{"wr"}
	transformv	___310_v $const7 $const17 ___310_v 	%line{125} %argrw{"wrrr"}
	functioncall	$const18 133 	%line{126} %argrw{"r"}
	transformn	___310_n $const9 $const17 N 	%filename{"E:/OSL_install\\shaders\\stdosl.h"} %line{241} %argrw{"wrrr"}
	compref		___310_d ___310_n $const2 	%filename{"E:/github/elaramax/Shaders/max_falloff.osl"} %line{127} %argrw{"wrr"}
	getmatrix	$tmp56 $const17 $const8 ___310_tm 	%line{128} %argrw{"wrrw"}
	if		$tmp56 137 138 	%argrw{"r"}
	mxcompref	___310_l ___310_tm $const2 $const2 	%line{129} %argrw{"wrrr"}
	assign		___310_l $const19 	%line{131} %argrw{"wr"}
	eq		$tmp57 param.direction $const20 	%line{134} %argrw{"wrr"}
	if		$tmp57 149 181 	%argrw{"r"}
	assign		___310_v $const21 	%line{135} %argrw{"wr"}
	transformv	___310_v $const7 $const17 ___310_v 	%line{136} %argrw{"wrrr"}
	functioncall	$const18 144 	%line{137} %argrw{"r"}
	transformn	___310_n $const9 $const17 N 	%filename{"E:/OSL_install\\shaders\\stdosl.h"} %line{241} %argrw{"wrrr"}
	compref		___310_d ___310_n $const1 	%filename{"E:/github/elaramax/Shaders/max_falloff.osl"} %line{138} %argrw{"wrr"}
	getmatrix	$tmp58 $const17 $const8 ___310_tm 	%line{139} %argrw{"wrrw"}
	if		$tmp58 148 149 	%argrw{"r"}
	mxcompref	___310_l ___310_tm $const2 $const1 	%line{140} %argrw{"wrrr"}
	assign		___310_l $const19 	%line{142} %argrw{"wr"}
	eq		$tmp59 param.direction $const22 	%line{144} %argrw{"wrr"}
	if		$tmp59 160 181 	%argrw{"r"}
	assign		___310_v $const23 	%line{145} %argrw{"wr"}
	transformv	___310_v $const7 $const17 ___310_v 	%line{146} %argrw{"wrrr"}
	functioncall	$const18 155 	%line{147} %argrw{"r"}
	transformn	___310_n $const9 $const17 N 	%filename{"E:/OSL_install\\shaders\\stdosl.h"} %line{241} %argrw{"wrrr"}
	compref		___310_d ___310_n $const10 	%filename{"E:/github/elaramax/Shaders/max_falloff.osl"} %line{148} %argrw{"wrr"}
	getmatrix	$tmp60 $const17 $const8 ___310_tm 	%line{149} %argrw{"wrrw"}
	if		$tmp60 159 160 	%argrw{"r"}
	mxcompref	___310_l ___310_tm $const2 $const10 	%line{150} %argrw{"wrrr"}
	assign		___310_l $const19 	%line{152} %argrw{"wr"}
	eq		$tmp61 param.direction $const24 	%line{155} %argrw{"wrr"}
	if		$tmp61 167 181 	%argrw{"r"}
	assign		___310_v $const16 	%line{156} %argrw{"wr"}
	transformv	___310_v $const7 $const8 ___310_v 	%line{157} %argrw{"wrrr"}
	assign		___310_n N 	%line{158} %argrw{"wr"}
	compref		___310_d ___310_n $const2 	%line{159} %argrw{"wrr"}
	mxcompref	___310_l ___310_tm $const2 $const2 	%line{160} %argrw{"wrrr"}
	eq		$tmp62 param.direction $const25 	%line{161} %argrw{"wrr"}
	if		$tmp62 174 181 	%argrw{"r"}
	assign		___310_v $const21 	%line{162} %argrw{"wr"}
	transformv	___310_v $const7 $const8 ___310_v 	%line{163} %argrw{"wrrr"}
	assign		___310_n N 	%line{164} %argrw{"wr"}
	compref		___310_d ___310_n $const1 	%line{165} %argrw{"wrr"}
	mxcompref	___310_l ___310_tm $const2 $const1 	%line{166} %argrw{"wrrr"}
	eq		$tmp63 param.direction $const26 	%line{167} %argrw{"wrr"}
	if		$tmp63 181 181 	%argrw{"r"}
	assign		___310_v $const23 	%line{168} %argrw{"wr"}
	transformv	___310_v $const7 $const8 ___310_v 	%line{169} %argrw{"wrrr"}
	assign		___310_n N 	%line{170} %argrw{"wr"}
	compref		___310_d ___310_n $const10 	%line{171} %argrw{"wrr"}
	mxcompref	___310_l ___310_tm $const2 $const10 	%line{172} %argrw{"wrrr"}
	eq		$tmp64 param.type $const2 	%line{175} %argrw{"wrr"}
	if		$tmp64 186 320 	%argrw{"r"}
	add		$tmp65 ___310_d $const5 	%line{176} %argrw{"wrr"}
	mul		$tmp66 $const27 $tmp65 	%argrw{"wrr"}
	sub		___310_d $const5 $tmp66 	%argrw{"wrr"}
	eq		$tmp67 param.type $const1 	%line{177} %argrw{"wrr"}
	if		$tmp67 190 320 	%argrw{"r"}
	fabs		$tmp68 ___310_d 	%line{178} %argrw{"wr"}
	sub		___310_d $const5 $tmp68 	%argrw{"wrr"}
	eq		$tmp69 param.type $const10 	%line{179} %argrw{"wrr"}
	if		$tmp69 295 320 	%argrw{"r"}
	functioncall	$const18 194 	%line{182} %argrw{"r"}
	transformn	___310_n $const9 $const7 N 	%filename{"E:/OSL_install\\shaders\\stdosl.h"} %line{241} %argrw{"wrrr"}
	dot		___332_VdotN ___310_n ___310_v 	%filename{"E:/github/elaramax/Shaders/max_falloff.osl"} %line{183} %argrw{"wrr"}
	mul		$tmp70 $const28 ___332_VdotN 	%line{185} %argrw{"wrr"}
	mul		$tmp71 $tmp70 ___310_n 	%argrw{"wrr"}
	sub		$tmp72 $tmp71 ___310_v 	%argrw{"wrr"}
	neg		___332_R $tmp72 	%argrw{"wr"}
	eq		$tmp73 param.mtlIOROverride $const1 	%line{186} %argrw{"wrr"}
	if		$tmp73 246 295 	%argrw{"r"}
	functioncall	$const29 246 	%line{187} %argrw{"r"}
	neg		___332_R ___332_R 	%line{48} %argrw{"wr"}
	add		___305_VR ___332_R ___310_v 	%line{49} %argrw{"wrr"}
	normalize	___305_VR ___305_VR 	%line{50} %argrw{"wr"}
	dot		___305_c ___310_v ___305_VR 	%line{51} %argrw{"wrr"}
	mul		$tmp74 param.ior param.ior 	%line{54} %argrw{"wrr"}
	mul		$tmp75 ___305_c ___305_c 	%argrw{"wrr"}
	add		$tmp76 $tmp74 $tmp75 	%argrw{"wrr"}
	sub		___305_g $tmp76 $const5 	%argrw{"wrr"}
	lt		$tmp77 ___305_g $const3 	%line{55} %argrw{"wrr"}
	if		$tmp77 213 214 	%argrw{"r"}
	assign		___305_g $const3 	%line{56} %argrw{"wr"}
	sqrt		___305_g ___305_g 	%line{58} %argrw{"wr"}
	neg		$tmp78 ___305_c 	%line{61} %argrw{"wr"}
	neq		$tmp79 ___305_g $tmp78 	%argrw{"wrr"}
	if		$tmp79 244 246 	%argrw{"r"}
	sub		$tmp80 ___305_g ___305_c 	%line{62} %argrw{"wrr"}
	sub		$tmp81 ___305_g ___305_c 	%argrw{"wrr"}
	mul		$tmp82 $tmp80 $tmp81 	%argrw{"wrr"}
	add		$tmp83 ___305_g ___305_c 	%argrw{"wrr"}
	mul		$tmp84 $const28 $tmp83 	%argrw{"wrr"}
	add		$tmp85 ___305_g ___305_c 	%argrw{"wrr"}
	mul		$tmp86 $tmp84 $tmp85 	%argrw{"wrr"}
	div		$tmp87 $tmp82 $tmp86 	%argrw{"wrr"}
	add		$tmp88 ___305_g ___305_c 	%argrw{"wrr"}
	mul		$tmp89 ___305_c $tmp88 	%argrw{"wrr"}
	sub		$tmp90 $tmp89 $const5 	%argrw{"wrr"}
	add		$tmp91 ___305_g ___305_c 	%argrw{"wrr"}
	mul		$tmp92 ___305_c $tmp91 	%argrw{"wrr"}
	sub		$tmp93 $tmp92 $const5 	%argrw{"wrr"}
	mul		$tmp94 $tmp90 $tmp93 	%argrw{"wrr"}
	add		$tmp95 ___305_g ___305_c 	%argrw{"wrr"}
	mul		$tmp96 ___305_c $tmp95 	%argrw{"wrr"}
	add		$tmp97 $tmp96 $const5 	%argrw{"wrr"}
	add		$tmp98 ___305_g ___305_c 	%argrw{"wrr"}
	mul		$tmp99 ___305_c $tmp98 	%argrw{"wrr"}
	add		$tmp100 $tmp99 $const5 	%argrw{"wrr"}
	mul		$tmp101 $tmp97 $tmp100 	%argrw{"wrr"}
	div		$tmp102 $tmp94 $tmp101 	%argrw{"wrr"}
	add		$tmp103 $const5 $tmp102 	%argrw{"wrr"}
	mul		___305_c $tmp87 $tmp103 	%argrw{"wrr"}
	assign		___310_d ___305_c 	%line{63} %argrw{"wr"}
	return
	assign		___310_d $const2 	%line{66} %argrw{"wr"}
	return
	assign		___333_ior param.ior 	%line{189} %argrw{"wr"}
	eq		$tmp104 ___333_ior $const2 	%line{190} %argrw{"wrr"}
	if		$tmp104 250 250 	%argrw{"r"}
	assign		___333_ior $const5 	%argrw{"wr"}
	functioncall	$const29 295 	%line{191} %argrw{"r"}
	neg		___332_R ___332_R 	%line{48} %argrw{"wr"}
	add		___305_VR ___332_R ___310_v 	%line{49} %argrw{"wrr"}
	normalize	___305_VR ___305_VR 	%line{50} %argrw{"wr"}
	dot		___305_c ___310_v ___305_VR 	%line{51} %argrw{"wrr"}
	mul		$tmp105 ___333_ior ___333_ior 	%line{54} %argrw{"wrr"}
	mul		$tmp106 ___305_c ___305_c 	%argrw{"wrr"}
	add		$tmp107 $tmp105 $tmp106 	%argrw{"wrr"}
	sub		___305_g $tmp107 $const5 	%argrw{"wrr"}
	lt		$tmp108 ___305_g $const3 	%line{55} %argrw{"wrr"}
	if		$tmp108 262 263 	%argrw{"r"}
	assign		___305_g $const3 	%line{56} %argrw{"wr"}
	sqrt		___305_g ___305_g 	%line{58} %argrw{"wr"}
	neg		$tmp109 ___305_c 	%line{61} %argrw{"wr"}
	neq		$tmp110 ___305_g $tmp109 	%argrw{"wrr"}
	if		$tmp110 293 295 	%argrw{"r"}
	sub		$tmp111 ___305_g ___305_c 	%line{62} %argrw{"wrr"}
	sub		$tmp112 ___305_g ___305_c 	%argrw{"wrr"}
	mul		$tmp113 $tmp111 $tmp112 	%argrw{"wrr"}
	add		$tmp114 ___305_g ___305_c 	%argrw{"wrr"}
	mul		$tmp115 $const28 $tmp114 	%argrw{"wrr"}
	add		$tmp116 ___305_g ___305_c 	%argrw{"wrr"}
	mul		$tmp117 $tmp115 $tmp116 	%argrw{"wrr"}
	div		$tmp118 $tmp113 $tmp117 	%argrw{"wrr"}
	add		$tmp119 ___305_g ___305_c 	%argrw{"wrr"}
	mul		$tmp120 ___305_c $tmp119 	%argrw{"wrr"}
	sub		$tmp121 $tmp120 $const5 	%argrw{"wrr"}
	add		$tmp122 ___305_g ___305_c 	%argrw{"wrr"}
	mul		$tmp123 ___305_c $tmp122 	%argrw{"wrr"}
	sub		$tmp124 $tmp123 $const5 	%argrw{"wrr"}
	mul		$tmp125 $tmp121 $tmp124 	%argrw{"wrr"}
	add		$tmp126 ___305_g ___305_c 	%argrw{"wrr"}
	mul		$tmp127 ___305_c $tmp126 	%argrw{"wrr"}
	add		$tmp128 $tmp127 $const5 	%argrw{"wrr"}
	add		$tmp129 ___305_g ___305_c 	%argrw{"wrr"}
	mul		$tmp130 ___305_c $tmp129 	%argrw{"wrr"}
	add		$tmp131 $tmp130 $const5 	%argrw{"wrr"}
	mul		$tmp132 $tmp128 $tmp131 	%argrw{"wrr"}
	div		$tmp133 $tmp125 $tmp132 	%argrw{"wrr"}
	add		$tmp134 $const5 $tmp133 	%argrw{"wrr"}
	mul		___305_c $tmp118 $tmp134 	%argrw{"wrr"}
	assign		___310_d ___305_c 	%line{63} %argrw{"wr"}
	return
	assign		___310_d $const2 	%line{66} %argrw{"wr"}
	return
	eq		$tmp135 param.type $const15 	%line{193} %argrw{"wrr"}
	if		$tmp135 320 320 	%argrw{"r"}
	eq		$tmp136 param.extrapolateOn $const2 	%line{194} %argrw{"wrr"}
	neq		$tmp137 $tmp136 $const2 	%argrw{"wrr"}
	if		$tmp137 303 303 	%argrw{"r"}
	le		$tmp138 ___310_l param.nearDistance 	%argrw{"wrr"}
	neq		$tmp139 $tmp138 $const2 	%argrw{"wrr"}
	assign		$tmp137 $tmp139 	%argrw{"wr"}
	if		$tmp137 305 320 	%argrw{"r"}
	assign		___310_d $const5 	%line{196} %argrw{"wr"}
	eq		$tmp140 param.extrapolateOn $const2 	%line{199} %argrw{"wrr"}
	neq		$tmp141 $tmp140 $const2 	%argrw{"wrr"}
	if		$tmp141 311 311 	%argrw{"r"}
	gt		$tmp142 ___310_l param.farDistance 	%argrw{"wrr"}
	neq		$tmp143 $tmp142 $const2 	%argrw{"wrr"}
	assign		$tmp141 $tmp143 	%argrw{"wr"}
	if		$tmp141 313 320 	%argrw{"r"}
	assign		___310_d $const3 	%line{201} %argrw{"wr"}
	sub		$tmp144 param.farDistance param.nearDistance 	%line{205} %argrw{"wrr"}
	neq		$tmp145 $tmp144 $const3 	%argrw{"wrr"}
	if		$tmp145 319 320 	%argrw{"r"}
	sub		$tmp146 param.farDistance ___310_l 	%argrw{"wrr"}
	sub		$tmp147 param.farDistance param.nearDistance 	%argrw{"wrr"}
	div		___310_d $tmp146 $tmp147 	%argrw{"wrr"}
	assign		___310_d $const30 	%argrw{"wr"}
	assign		f ___310_d 	%line{209} %argrw{"wr"}
	return
	sub		$tmp148 c2 c1 	%line{277} %argrw{"wrr"}
	mul		$tmp149 f $tmp148 	%argrw{"wrr"}
	add		result c1 $tmp149 	%argrw{"wrr"}
	sub		$tmp150 a2 a1 	%line{278} %argrw{"wrr"}
	mul		$tmp151 f $tmp150 	%argrw{"wrr"}
	add		result_alpha a1 $tmp151 	%argrw{"wrr"}
	sub		$tmp152 n2 n1 	%line{279} %argrw{"wrr"}
	mul		$tmp153 f $tmp152 	%argrw{"wrr"}
	add		result_bump n1 $tmp153 	%argrw{"wrr"}
	end
