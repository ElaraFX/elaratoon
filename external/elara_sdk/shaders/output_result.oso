OpenShadingLanguage 1.00
# Compiled by oslc 1.7.2
# options: 
surface output_result
param	color	input	0 0 0		%read{2,38} %write{2147483647,-1}
param	int	env_emits_GI	0		%read{0,0} %write{2147483647,-1}
global	closure color	Ci	%read{2147483647,-1} %write{2,38}
temp	closure color	$tmp1	%read{2,2} %write{1,1}
const	string	$const1	"background"		%read{1,37} %write{2147483647,-1}
const	int	$const2	0		%read{3,35} %write{2147483647,-1}
temp	int	$tmp2	%read{5,5} %write{4,4}
const	string	$const3	"reflect"		%read{4,12} %write{2147483647,-1}
temp	int	$tmp3	%read{6,10} %write{5,9}
temp	int	$tmp4	%read{8,8} %write{7,7}
const	string	$const4	"diffuse"		%read{7,25} %write{2147483647,-1}
temp	int	$tmp5	%read{9,9} %write{8,8}
temp	int	$tmp6	%read{11,20} %write{10,19}
temp	int	$tmp7	%read{13,13} %write{12,12}
temp	int	$tmp8	%read{14,18} %write{13,17}
temp	int	$tmp9	%read{16,16} %write{15,15}
const	string	$const5	"glossy"		%read{15,15} %write{2147483647,-1}
temp	int	$tmp10	%read{17,17} %write{16,16}
temp	int	$tmp11	%read{19,19} %write{18,18}
temp	int	$tmp12	%read{21,30} %write{20,29}
temp	int	$tmp13	%read{23,23} %write{22,22}
const	string	$const6	"refract"		%read{22,22} %write{2147483647,-1}
temp	int	$tmp14	%read{24,28} %write{23,27}
temp	int	$tmp15	%read{26,26} %write{25,25}
temp	int	$tmp16	%read{27,27} %write{26,26}
temp	int	$tmp17	%read{29,29} %write{28,28}
temp	int	$tmp18	%read{31,35} %write{30,34}
temp	int	$tmp19	%read{33,33} %write{32,32}
const	string	$const7	"volume_scatter"		%read{32,32} %write{2147483647,-1}
temp	int	$tmp20	%read{34,34} %write{33,33}
temp	int	$tmp21	%read{36,36} %write{35,35}
temp	closure color	$tmp22	%read{38,38} %write{37,37}
code ___main___
	if		env_emits_GI 3 39 	%filename{"E:/github/elaramax/Shaders/output_result.osl"} %line{24} %argrw{"r"}
	closure		$tmp1 $const1 	%line{26} %argrw{"wr"}
	mul		Ci $tmp1 input 	%argrw{"wrr"}
	assign		Ci $const2 	%line{30} %argrw{"wr"}
	raytype		$tmp2 $const3 	%line{33} %argrw{"wr"}
	neq		$tmp3 $tmp2 $const2 	%argrw{"wrr"}
	if		$tmp3 10 10 	%argrw{"r"}
	raytype		$tmp4 $const4 	%argrw{"wr"}
	neq		$tmp5 $tmp4 $const2 	%argrw{"wrr"}
	assign		$tmp3 $tmp5 	%argrw{"wr"}
	neq		$tmp6 $tmp3 $const2 	%argrw{"wrr"}
	if		$tmp6 12 20 	%line{34} %argrw{"r"}
	raytype		$tmp7 $const3 	%argrw{"wr"}
	neq		$tmp8 $tmp7 $const2 	%argrw{"wrr"}
	if		$tmp8 18 18 	%argrw{"r"}
	raytype		$tmp9 $const5 	%argrw{"wr"}
	neq		$tmp10 $tmp9 $const2 	%argrw{"wrr"}
	assign		$tmp8 $tmp10 	%argrw{"wr"}
	neq		$tmp11 $tmp8 $const2 	%argrw{"wrr"}
	assign		$tmp6 $tmp11 	%argrw{"wr"}
	neq		$tmp12 $tmp6 $const2 	%argrw{"wrr"}
	if		$tmp12 22 30 	%line{35} %argrw{"r"}
	raytype		$tmp13 $const6 	%argrw{"wr"}
	neq		$tmp14 $tmp13 $const2 	%argrw{"wrr"}
	if		$tmp14 28 28 	%argrw{"r"}
	raytype		$tmp15 $const4 	%argrw{"wr"}
	neq		$tmp16 $tmp15 $const2 	%argrw{"wrr"}
	assign		$tmp14 $tmp16 	%argrw{"wr"}
	neq		$tmp17 $tmp14 $const2 	%argrw{"wrr"}
	assign		$tmp12 $tmp17 	%argrw{"wr"}
	neq		$tmp18 $tmp12 $const2 	%argrw{"wrr"}
	if		$tmp18 32 35 	%line{37} %argrw{"r"}
	raytype		$tmp19 $const7 	%line{36} %argrw{"wr"}
	neq		$tmp20 $tmp19 $const2 	%argrw{"wrr"}
	assign		$tmp18 $tmp20 	%line{37} %argrw{"wr"}
	eq		$tmp21 $tmp18 $const2 	%argrw{"wrr"}
	if		$tmp21 39 39 	%line{32} %argrw{"r"}
	closure		$tmp22 $const1 	%line{39} %argrw{"wr"}
	mul		Ci $tmp22 input 	%argrw{"wrr"}
	end
